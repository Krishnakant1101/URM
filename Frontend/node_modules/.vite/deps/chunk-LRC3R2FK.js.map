{
  "version": 3,
  "sources": ["../../@mui/joy/InitColorSchemeScript/InitColorSchemeScript.js", "../../@mui/joy/styles/CssVarsProvider.js", "../../@mui/joy/styles/ThemeProvider.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport SystemInitColorSchemeScript from '@mui/system/InitColorSchemeScript';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport const defaultConfig = {\r\n  attribute: 'data-joy-color-scheme',\r\n  colorSchemeStorageKey: 'joy-color-scheme',\r\n  defaultLightColorScheme: 'light',\r\n  defaultDarkColorScheme: 'dark',\r\n  modeStorageKey: 'joy-mode'\r\n};\r\nexport default (function InitColorSchemeScript(props) {\r\n  return /*#__PURE__*/_jsx(SystemInitColorSchemeScript, _extends({}, defaultConfig, props));\r\n});", "'use client';\r\n\r\n// do not remove the following import (https://github.com/microsoft/TypeScript/issues/29808#issuecomment-1320713018)\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// @ts-ignore\r\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\r\nimport defaultTheme from './defaultTheme';\r\nimport THEME_ID from './identifier';\r\nimport { defaultConfig } from '../InitColorSchemeScript/InitColorSchemeScript';\r\nconst {\r\n  CssVarsProvider,\r\n  useColorScheme,\r\n  getInitColorSchemeScript: getInitColorSchemeScriptSystem\r\n} = createCssVarsProvider({\r\n  themeId: THEME_ID,\r\n  theme: defaultTheme,\r\n  attribute: defaultConfig.attribute,\r\n  modeStorageKey: defaultConfig.modeStorageKey,\r\n  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\r\n  defaultColorScheme: {\r\n    light: defaultConfig.defaultLightColorScheme,\r\n    dark: defaultConfig.defaultDarkColorScheme\r\n  }\r\n});\r\n\r\n/**\r\n * @deprecated use `InitColorSchemeScript` instead\r\n *\r\n * ```diff\r\n * - import { getInitColorSchemeScript } from '@mui/joy/styles';\r\n * + import InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';\r\n *\r\n * - getInitColorSchemeScript();\r\n * + <InitColorSchemeScript />;\r\n * ```\r\n */\r\nexport const getInitColorSchemeScript = getInitColorSchemeScriptSystem;\r\nexport { CssVarsProvider, useColorScheme };", "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { ThemeProvider as SystemThemeProvider, useTheme as useSystemTheme } from '@mui/system';\r\nimport defaultTheme from './defaultTheme';\r\nimport extendTheme from './extendTheme';\r\nimport THEME_ID from './identifier';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport const useTheme = () => {\r\n  const theme = useSystemTheme(defaultTheme);\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useDebugValue(theme);\r\n  }\r\n\r\n  // @ts-ignore internal logic\r\n  return theme[THEME_ID] || theme;\r\n};\r\nexport default function ThemeProvider({\r\n  children,\r\n  theme: themeInput\r\n}) {\r\n  let theme = defaultTheme;\r\n  if (themeInput) {\r\n    theme = extendTheme(THEME_ID in themeInput ? themeInput[THEME_ID] : themeInput);\r\n  }\r\n  return /*#__PURE__*/_jsx(SystemThemeProvider, {\r\n    theme: theme,\r\n    themeId: themeInput && THEME_ID in themeInput ? THEME_ID : undefined,\r\n    children: children\r\n  });\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;AACA,YAAuB;AAEvB,yBAA4B;AACrB,IAAM,gBAAgB;AAAA,EAC3B,WAAW;AAAA,EACX,uBAAuB;AAAA,EACvB,yBAAyB;AAAA,EACzB,wBAAwB;AAAA,EACxB,gBAAgB;AAClB;;;ACDA,IAAM;AAAA,EACJ;AAAA,EACA;AAAA,EACA,0BAA0B;AAC5B,IAAI,sBAAsB;AAAA,EACxB,SAAS;AAAA,EACT,OAAO;AAAA,EACP,WAAW,cAAc;AAAA,EACzB,gBAAgB,cAAc;AAAA,EAC9B,uBAAuB,cAAc;AAAA,EACrC,oBAAoB;AAAA,IAClB,OAAO,cAAc;AAAA,IACrB,MAAM,cAAc;AAAA,EACtB;AACF,CAAC;;;ACrBD,IAAAA,SAAuB;AAKvB,IAAAC,sBAA4B;",
  "names": ["React", "import_jsx_runtime"]
}
